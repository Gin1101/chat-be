# bạn cần set worker processes dựa trên CPU core, nginx không được hưởng từ việc settting nhiều hơn thế
worker_processes auto; # một vài version mới sẽ tự động tính toán nó

# số lượng file descriptors sử dụng cho nginx
# giới hạn cho các file descriptors trên server thường đưuọc set vởi OS
# nếu bạn không set file descriptors thì mặc định sẽ là 2000
worker_rlimit_nofile 100000;

# chỉ log những lỗi "chí mạng" (critical) :)))
error_log /var/log/nginx/error.log crit;

# cung cấp file cấu hình mà trong đó các lệnh ảnh thưởng đến connection processing được chỉ định
events {
	# xác định có bao nhiêu client sẽ được phục vụ mỗi worker
	# max clients = worker_connections * worker_processes
	# max clients cũng bị giới hạn số lượng socket connections có sẵn trên hệ thống (khoảng 64k)
	worker_connections 4000;

	# tối ưu để phục vụ nhiều client với mỗi thread, cần thiết cho linux (cho môi trường test)
	use epoll;

	# accept càng nhiều kết nối càng tốt, có thể flood worker connection nếu set cho nó quá thấp (cho môi trường test)
	multi_accept on;
}

http {
	default_type application/octet-stream;
	include /etc/nginx/mime.types;

	# cache thông tin về FDs (file descriptors), files thường xuyên truy cập
	# có thể tăng hiệu suất, nhưng bạn cũng cần test các giá trị này
	open_file_cache max=200000 inactive=20s;
	open_file_cache_valid 30s;
	open_file_cache_min_uses 2;
	open_file_cache_errors on;

	# sao chép data
	# nhanh hơn đọc + ghi
	sendfile on;

	# gửi header trong 1 cục thay vì gửi từng cái
	tcp_nopush on;

	# không buffer data sent, tốt cho dữ liệu nhỏ trong thời gian thực
	tcp_nodelay on;

	# giảm data cần gửi qua network (cho môi trường test)
	gzip on;
	# gzip_static on;
	gzip_min_length 10240;
	gzip_comp_level 1;
	gzip_vary on;
	gzip_disable msie6;
	gzip_proxied expired no-cache no-store private auth;
	gzip_types
	# text/html luôn luôn được nén bởi HttpGzipModule
	text/css
	text/javascript
	text/xml
	text/plain
	text/x-component
	application/javascript
	application/x-javascript
	application/json
	application/xml
	application/rss+xml
	application/atom+xml
	font/truetype
	font/opentype
	application/vnd.ms-fontobject
	image/svg+xml;

	# cho phép server đóng connection với client không còn được tương tác, nó sẽ giúp giải phóng bộ nhớ
	reset_timedout_connection on;

	# request timed out, mặc định là 60s
	client_body_timeout 10;

	# nếu client ngừng tương tác, giải phóng bộ nhớ, mặc định là 60s
	send_timeout 2;

	# set thời gian server sẽ đóng connection, mặc định là 75s
	keepalive_timeout 30;

	# số lượng request từ client có thể thực hiện liên tục (cho môi trường test)
	keepalive_requests 100000;

	# giới hạn số lượng connections với mỗi IP
	limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

	# giới hạn số lượng reqest cho session
	limit_req_zone $binary_remote_addr zone=req_limit_per_ip:10m rate=5r/s;

	# nơi mà chúng ta sẽ giới hạn bởi các giá trị trên, ở đây thì mình làm với toàn bộ server
	server {
		limit_conn conn_limit_per_ip 10;
		limit_req zone=req_limit_per_ip burst=10 nodelay;
	}

	# nếu như request body size lớn hơn buffer size, thì sau đó toàn bộ (hoặc một phần) request body được ghi vào file tạm
	client_body_buffer_size 128k;

	# số lượng và buffer size tối đa cho các header lớn để đọc từ yêu cầu của client
	large_client_header_buffers 4 256k;

	server {
		listen 80;
		server_name nv567.net www.nv567.net;
		charset utf-8;
		root /var/www/home;
		index index.html;

		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $remote_addr;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header Host $host;

		location ~* .(ico|jpg|png|gif|jpeg|swf|js|woff)$ {
			access_log off;
			gzip_static on;
			gzip_comp_level 5;
			expires 1M;
			add_header Cache-Control private;
			# add_header Cache-Control public;
			try_files $uri /index.html;
		}

		location /\.css {
			default_type text/css;
		}

		#Always serve index.html for any request
		location / {
			root /var/www/home;
			try_files $uri /index.html;
		}
		error_log /var/log/nginx/home-error.log;
		access_log /var/log/nginx/home-access.log;
	}
	server {
		listen 80;
		server_name m.nv567.net www.m.nv567.net;
		charset utf-8;
		root /var/www/mobile;
		index index.html;

		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $remote_addr;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header Host $host;

		location ~* .(ico|jpg|png|gif|jpeg|swf|js|woff)$ {
			access_log off;
			gzip_static on;
			gzip_comp_level 5;
			expires 1M;
			add_header Cache-Control private;
			# add_header Cache-Control public;
			try_files $uri /index.html;
		}

		location /\.css {
			default_type text/css;
		}

		#Always serve index.html for any request
		location / {
			root /var/www/mobile;
			try_files $uri /index.html;
		}
		error_log /var/log/nginx/mobile-error.log;
		access_log /var/log/nginx/mobile-access.log;
	}
	server {
		listen 80;
		server_name adp.nv567.net www.adp.nv567.net;
		charset utf-8;
		root /var/www/adp;
		index index.html;

		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $remote_addr;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_set_header Host $host;

		location ~* .(ico|jpg|png|gif|jpeg|swf|js|woff)$ {
			access_log off;
			gzip_static on;
			gzip_comp_level 5;
			expires 1M;
			add_header Cache-Control private;
			# add_header Cache-Control public;
			try_files $uri /index.html;
		}

		location /\.css {
			default_type text/css;
		}

		#Always serve index.html for any request
		location / {
			root /var/www/adp;
			try_files $uri /index.html;
		}
		error_log /var/log/nginx/adp-error.log;
		access_log /var/log/nginx/adp-access.log;
	}

	server {
		client_max_body_size 25M;

		server_name api.nv567.net www.api.nv567.net;

		location / {
			proxy_pass http://localhost:4000;
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection 'upgrade';
			proxy_set_header Host $host;
			proxy_cache_bypass $http_upgrade;
		}
	}
}
